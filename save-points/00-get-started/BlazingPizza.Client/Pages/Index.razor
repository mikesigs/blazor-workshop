@page "/"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject OrderState OrderState
@inject IJSRuntime JS

<div class="main">
    <ul class="pizza-cards">
        @if (specials != null)
        {
            @foreach (var special in specials)                 
            {
                <li @onclick=@(e => OrderState.ShowConfigurePizzaDialog(special)) style="background-image: url('@special.ImageUrl')">
                    <div class="pizza-info">
                        <span class="title">@special.Name</span>
                        @special.Description
                        <span class="price">@special.GetFormattedBasePrice()</span>
                    </div>
                </li>
            }            
        }
    </ul>
</div>

<div class="sidebar">
    @if (OrderState.Order.Pizzas.Any())
    {
        <div class="order-contents">
            <h2>Your order</h2>

            @foreach (var configuredPizza in OrderState.Order.Pizzas)
            {
                <ConfiguredPizzaItem Pizza="configuredPizza" OnRemoved="@(e => RemovePizza(configuredPizza))"/>
            }
        </div>
    } 
    else
    {
        <div class="empty-cart">Choose a pizza<br/>to get started</div>
    }

    <div class="order-total @(OrderState.Order.Pizzas.Any() ? string.Empty : "hidden")">
        Total:
        <span class="total-price">@OrderState.Order.GetFormattedTotalPrice()</span>
        <a href="checkout" class="btn btn-warning @(!OrderState.Order.Pizzas.Any() ? "disabled" : "")" >Order ></a>
    </div>
</div>

@if (OrderState.ShowingConfigureDialog)
{
    <TemplatedDialog Show="OrderState.ShowingConfigureDialog">
        <ConfigurePizzaDialog 
        Pizza="OrderState.ConfiguringPizza" 
        OnCancel="() => OrderState.CancelConfigurePizzaDialog()" 
        OnConfirm="() => OrderState.ConfirmConfigurePizzaDialog()" />
    </TemplatedDialog>
}

@code {
    List<PizzaSpecial> specials;

    protected override async Task OnInitializedAsync()
    {
        specials = await Http.GetFromJsonAsync<List<PizzaSpecial>>("specials");
    }

    private async Task RemovePizza(Pizza configuredPizza)
    {
        if (await (JS.Confirm($"Remove {configuredPizza.Special.Name} pizza from the order?")))
        {
            OrderState.RemoveConfiguredPizza(configuredPizza);
        }
    }
}